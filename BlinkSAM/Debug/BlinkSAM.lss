
BlinkSAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00400478  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  004008ac  00020434  2**2
                  ALLOC
  3 .stack        00003004  20000474  004008ec  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000351a  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e2  00000000  00000000  000239d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000090  00000000  00000000  000241b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  00024247  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00001606  00000000  00000000  00024297  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000245f  00000000  00000000  0002589d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00061633  00000000  00000000  00027cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000268  00000000  00000000  00089330  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000000aa  00000000  00000000  00089598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 34 00 20 69 01 40 00 65 01 40 00 65 01 40 00     x4. i.@.e.@.e.@.
  400010:	65 01 40 00 65 01 40 00 65 01 40 00 00 00 00 00     e.@.e.@.e.@.....
	...
  40002c:	65 01 40 00 65 01 40 00 00 00 00 00 65 01 40 00     e.@.e.@.....e.@.
  40003c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40004c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40005c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40006c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40007c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40008c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40009c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  4000ac:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  4000bc:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  4000cc:	65 01 40 00 65 01 40 00 65 01 40 00 31 02 40 00     e.@.e.@.e.@.1.@.
  4000dc:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  4000ec:	65 01 40 00 65 01 40 00 65 01 40 00                 e.@.e.@.e.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000434 	.word	0x20000434
  400114:	00000000 	.word	0x00000000
  400118:	00400478 	.word	0x00400478

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00400478 	.word	0x00400478
  400158:	20000438 	.word	0x20000438
  40015c:	00400478 	.word	0x00400478
  400160:	00000000 	.word	0x00000000

00400164 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400164:	e7fe      	b.n	400164 <Dummy_Handler>
	...

00400168 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400168:	b500      	push	{lr}
  40016a:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40016c:	4b25      	ldr	r3, [pc, #148]	; (400204 <Reset_Handler+0x9c>)
  40016e:	4a26      	ldr	r2, [pc, #152]	; (400208 <Reset_Handler+0xa0>)
  400170:	429a      	cmp	r2, r3
  400172:	d010      	beq.n	400196 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400174:	4b25      	ldr	r3, [pc, #148]	; (40020c <Reset_Handler+0xa4>)
  400176:	4a23      	ldr	r2, [pc, #140]	; (400204 <Reset_Handler+0x9c>)
  400178:	429a      	cmp	r2, r3
  40017a:	d20c      	bcs.n	400196 <Reset_Handler+0x2e>
  40017c:	3b01      	subs	r3, #1
  40017e:	1a9b      	subs	r3, r3, r2
  400180:	f023 0303 	bic.w	r3, r3, #3
  400184:	3304      	adds	r3, #4
  400186:	4413      	add	r3, r2
  400188:	491f      	ldr	r1, [pc, #124]	; (400208 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40018a:	f851 0b04 	ldr.w	r0, [r1], #4
  40018e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400192:	429a      	cmp	r2, r3
  400194:	d1f9      	bne.n	40018a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400196:	4b1e      	ldr	r3, [pc, #120]	; (400210 <Reset_Handler+0xa8>)
  400198:	4a1e      	ldr	r2, [pc, #120]	; (400214 <Reset_Handler+0xac>)
  40019a:	429a      	cmp	r2, r3
  40019c:	d20a      	bcs.n	4001b4 <Reset_Handler+0x4c>
  40019e:	3b01      	subs	r3, #1
  4001a0:	1a9b      	subs	r3, r3, r2
  4001a2:	f023 0303 	bic.w	r3, r3, #3
  4001a6:	3304      	adds	r3, #4
  4001a8:	4413      	add	r3, r2
		*pDest++ = 0;
  4001aa:	2100      	movs	r1, #0
  4001ac:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4001b0:	4293      	cmp	r3, r2
  4001b2:	d1fb      	bne.n	4001ac <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4001b4:	4a18      	ldr	r2, [pc, #96]	; (400218 <Reset_Handler+0xb0>)
  4001b6:	4b19      	ldr	r3, [pc, #100]	; (40021c <Reset_Handler+0xb4>)
  4001b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4001bc:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4001be:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4001c2:	fab3 f383 	clz	r3, r3
  4001c6:	095b      	lsrs	r3, r3, #5
  4001c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4001ca:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4001cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4001d0:	2200      	movs	r2, #0
  4001d2:	4b13      	ldr	r3, [pc, #76]	; (400220 <Reset_Handler+0xb8>)
  4001d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4001d6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4001d8:	4a12      	ldr	r2, [pc, #72]	; (400224 <Reset_Handler+0xbc>)
  4001da:	6813      	ldr	r3, [r2, #0]
  4001dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4001e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4001e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4001e6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4001ea:	b129      	cbz	r1, 4001f8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4001ec:	2201      	movs	r2, #1
  4001ee:	4b0c      	ldr	r3, [pc, #48]	; (400220 <Reset_Handler+0xb8>)
  4001f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4001f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4001f6:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4001f8:	4b0b      	ldr	r3, [pc, #44]	; (400228 <Reset_Handler+0xc0>)
  4001fa:	4798      	blx	r3

	/* Branch to main function */
	main();
  4001fc:	4b0b      	ldr	r3, [pc, #44]	; (40022c <Reset_Handler+0xc4>)
  4001fe:	4798      	blx	r3
  400200:	e7fe      	b.n	400200 <Reset_Handler+0x98>
  400202:	bf00      	nop
  400204:	20000000 	.word	0x20000000
  400208:	00400478 	.word	0x00400478
  40020c:	20000434 	.word	0x20000434
  400210:	20000474 	.word	0x20000474
  400214:	20000434 	.word	0x20000434
  400218:	e000ed00 	.word	0xe000ed00
  40021c:	00400000 	.word	0x00400000
  400220:	20000000 	.word	0x20000000
  400224:	e000ed88 	.word	0xe000ed88
  400228:	004002e1 	.word	0x004002e1
  40022c:	0040025d 	.word	0x0040025d

00400230 <CAN1_Handler>:
#define LIGHT_MB_MASK  	0b00000001111
#define LIGHT_MB_START	0b00000000001

void CAN1_Handler(void)
{
	const uint32_t id_received = canController->CAN_MB[LIGHT_MB].CAN_MID;
  400230:	4b08      	ldr	r3, [pc, #32]	; (400254 <CAN1_Handler+0x24>)
  400232:	681b      	ldr	r3, [r3, #0]
  400234:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
	switch (id_received)
  400238:	2b01      	cmp	r3, #1
  40023a:	d006      	beq.n	40024a <CAN1_Handler+0x1a>
  40023c:	2b0f      	cmp	r3, #15
  40023e:	d108      	bne.n	400252 <CAN1_Handler+0x22>
	{
		case LIGHT_ON_SUB_ID:
			SET_LIGHT_ON();
  400240:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400244:	4b04      	ldr	r3, [pc, #16]	; (400258 <CAN1_Handler+0x28>)
  400246:	635a      	str	r2, [r3, #52]	; 0x34
			break;
  400248:	4770      	bx	lr
		case LIGHT_OFF_SUB_ID:
			SET_LIGHT_OFF();
  40024a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40024e:	4b02      	ldr	r3, [pc, #8]	; (400258 <CAN1_Handler+0x28>)
  400250:	631a      	str	r2, [r3, #48]	; 0x30
  400252:	4770      	bx	lr
  400254:	20000004 	.word	0x20000004
  400258:	400e1400 	.word	0x400e1400

0040025c <main>:
static void hardware_init(void)
{
	/* 
	 * This simply configures LED as output pin and clears it
	 */
	LED0_PIO->PIO_OER = LED0_PIN;
  40025c:	4b1b      	ldr	r3, [pc, #108]	; (4002cc <main+0x70>)
  40025e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400262:	611a      	str	r2, [r3, #16]
    LED0_PIO->PIO_CODR = LED0_PIN;
  400264:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* 
	 *	The CAN controller clock must be activated by the Power Management Controller (PMC) 
	 *	and the CAN controller interrupt line must be enabled by the interrupt controller before use
	 */
	PMC->PMC_PCER1 |= PMC_PCER1_PID38; // Peripheral Identifier of CAN is 38, bit 6 of peripheral clock enable register corresponds to PID38 
  400266:	4a1a      	ldr	r2, [pc, #104]	; (4002d0 <main+0x74>)
  400268:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
  40026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400270:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400274:	2240      	movs	r2, #64	; 0x40
  400276:	4b17      	ldr	r3, [pc, #92]	; (4002d4 <main+0x78>)
  400278:	605a      	str	r2, [r3, #4]
	 * Set I/O lines to be controlled by CAN peripheral instead of PIO Controller
	 * We'll assign CAN as peripheral A on TX/RX pins by settings ABCD1 and ABCD2 to 0 for
	 * corresponding pins.
	 * Disable PIO Controller on TX and RX pins at PIO Disable Register
	 */
	CAN1_PIO->PIO_ABCDSR[0] &= ~(CAN1_RX_PIN | CAN1_TX_PIN);
  40027a:	4b17      	ldr	r3, [pc, #92]	; (4002d8 <main+0x7c>)
  40027c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40027e:	f422 4210 	bic.w	r2, r2, #36864	; 0x9000
  400282:	671a      	str	r2, [r3, #112]	; 0x70
	CAN1_PIO->PIO_ABCDSR[1] &= ~(CAN1_RX_PIN | CAN1_TX_PIN);
  400284:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400286:	f422 4210 	bic.w	r2, r2, #36864	; 0x9000
  40028a:	675a      	str	r2, [r3, #116]	; 0x74
	CAN1_PIO->PIO_PDR        =  (CAN1_RX_PIN | CAN1_TX_PIN);
  40028c:	f44f 4210 	mov.w	r2, #36864	; 0x9000
  400290:	605a      	str	r2, [r3, #4]
	
	/* 
	 * Enable CAN Controller and interrupts on Mailbox 0
	 */
	canController->CAN_MR |= CAN_MR_CANEN;
  400292:	4b12      	ldr	r3, [pc, #72]	; (4002dc <main+0x80>)
  400294:	6819      	ldr	r1, [r3, #0]
  400296:	680a      	ldr	r2, [r1, #0]
  400298:	f042 0201 	orr.w	r2, r2, #1
  40029c:	600a      	str	r2, [r1, #0]
	canController->CAN_MR &= ~CAN_MR_TTM; // Timestamping Mode is enabled by clearing the TTM bit in the CAN_MR
  40029e:	6819      	ldr	r1, [r3, #0]
  4002a0:	680a      	ldr	r2, [r1, #0]
  4002a2:	f022 0220 	bic.w	r2, r2, #32
  4002a6:	600a      	str	r2, [r1, #0]
	canController->CAN_IER |= CAN_IER_MB0;
  4002a8:	681b      	ldr	r3, [r3, #0]
  4002aa:	685a      	ldr	r2, [r3, #4]
  4002ac:	f042 0201 	orr.w	r2, r2, #1
  4002b0:	605a      	str	r2, [r3, #4]

	/* 
	 * Mailbox 0 will accept messages based on an acceptance Mask, this will have to be set
	 * by us based on our ID layout. Configure the mailbox as a receive box.
	 */
	canController->CAN_MB[LIGHT_MB].CAN_MAM = LIGHT_MB_MASK;
  4002b2:	220f      	movs	r2, #15
  4002b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	canController->CAN_MB[LIGHT_MB].CAN_MID = LIGHT_MB_START; // Default, will change on message acceptance
  4002b8:	2201      	movs	r2, #1
  4002ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	canController->CAN_MB[LIGHT_MB].CAN_MMR = CAN_MMR_MOT_MB_RX_OVERWRITE;
  4002be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4002c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

int main(void)
{
  	hardware_init();
}
  4002c6:	2000      	movs	r0, #0
  4002c8:	4770      	bx	lr
  4002ca:	bf00      	nop
  4002cc:	400e1400 	.word	0x400e1400
  4002d0:	400e0400 	.word	0x400e0400
  4002d4:	e000e100 	.word	0xe000e100
  4002d8:	400e1200 	.word	0x400e1200
  4002dc:	20000004 	.word	0x20000004

004002e0 <__libc_init_array>:
  4002e0:	b570      	push	{r4, r5, r6, lr}
  4002e2:	4e0f      	ldr	r6, [pc, #60]	; (400320 <__libc_init_array+0x40>)
  4002e4:	4d0f      	ldr	r5, [pc, #60]	; (400324 <__libc_init_array+0x44>)
  4002e6:	1b76      	subs	r6, r6, r5
  4002e8:	10b6      	asrs	r6, r6, #2
  4002ea:	bf18      	it	ne
  4002ec:	2400      	movne	r4, #0
  4002ee:	d005      	beq.n	4002fc <__libc_init_array+0x1c>
  4002f0:	3401      	adds	r4, #1
  4002f2:	f855 3b04 	ldr.w	r3, [r5], #4
  4002f6:	4798      	blx	r3
  4002f8:	42a6      	cmp	r6, r4
  4002fa:	d1f9      	bne.n	4002f0 <__libc_init_array+0x10>
  4002fc:	4e0a      	ldr	r6, [pc, #40]	; (400328 <__libc_init_array+0x48>)
  4002fe:	4d0b      	ldr	r5, [pc, #44]	; (40032c <__libc_init_array+0x4c>)
  400300:	1b76      	subs	r6, r6, r5
  400302:	f000 f8a7 	bl	400454 <_init>
  400306:	10b6      	asrs	r6, r6, #2
  400308:	bf18      	it	ne
  40030a:	2400      	movne	r4, #0
  40030c:	d006      	beq.n	40031c <__libc_init_array+0x3c>
  40030e:	3401      	adds	r4, #1
  400310:	f855 3b04 	ldr.w	r3, [r5], #4
  400314:	4798      	blx	r3
  400316:	42a6      	cmp	r6, r4
  400318:	d1f9      	bne.n	40030e <__libc_init_array+0x2e>
  40031a:	bd70      	pop	{r4, r5, r6, pc}
  40031c:	bd70      	pop	{r4, r5, r6, pc}
  40031e:	bf00      	nop
  400320:	00400460 	.word	0x00400460
  400324:	00400460 	.word	0x00400460
  400328:	00400468 	.word	0x00400468
  40032c:	00400460 	.word	0x00400460

00400330 <register_fini>:
  400330:	4b02      	ldr	r3, [pc, #8]	; (40033c <register_fini+0xc>)
  400332:	b113      	cbz	r3, 40033a <register_fini+0xa>
  400334:	4802      	ldr	r0, [pc, #8]	; (400340 <register_fini+0x10>)
  400336:	f000 b805 	b.w	400344 <atexit>
  40033a:	4770      	bx	lr
  40033c:	00000000 	.word	0x00000000
  400340:	00400351 	.word	0x00400351

00400344 <atexit>:
  400344:	2300      	movs	r3, #0
  400346:	4601      	mov	r1, r0
  400348:	461a      	mov	r2, r3
  40034a:	4618      	mov	r0, r3
  40034c:	f000 b81e 	b.w	40038c <__register_exitproc>

00400350 <__libc_fini_array>:
  400350:	b538      	push	{r3, r4, r5, lr}
  400352:	4c0a      	ldr	r4, [pc, #40]	; (40037c <__libc_fini_array+0x2c>)
  400354:	4d0a      	ldr	r5, [pc, #40]	; (400380 <__libc_fini_array+0x30>)
  400356:	1b64      	subs	r4, r4, r5
  400358:	10a4      	asrs	r4, r4, #2
  40035a:	d00a      	beq.n	400372 <__libc_fini_array+0x22>
  40035c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400360:	3b01      	subs	r3, #1
  400362:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400366:	3c01      	subs	r4, #1
  400368:	f855 3904 	ldr.w	r3, [r5], #-4
  40036c:	4798      	blx	r3
  40036e:	2c00      	cmp	r4, #0
  400370:	d1f9      	bne.n	400366 <__libc_fini_array+0x16>
  400372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400376:	f000 b877 	b.w	400468 <_fini>
  40037a:	bf00      	nop
  40037c:	00400478 	.word	0x00400478
  400380:	00400474 	.word	0x00400474

00400384 <__retarget_lock_acquire_recursive>:
  400384:	4770      	bx	lr
  400386:	bf00      	nop

00400388 <__retarget_lock_release_recursive>:
  400388:	4770      	bx	lr
  40038a:	bf00      	nop

0040038c <__register_exitproc>:
  40038c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400390:	4d2c      	ldr	r5, [pc, #176]	; (400444 <__register_exitproc+0xb8>)
  400392:	4606      	mov	r6, r0
  400394:	6828      	ldr	r0, [r5, #0]
  400396:	4698      	mov	r8, r3
  400398:	460f      	mov	r7, r1
  40039a:	4691      	mov	r9, r2
  40039c:	f7ff fff2 	bl	400384 <__retarget_lock_acquire_recursive>
  4003a0:	4b29      	ldr	r3, [pc, #164]	; (400448 <__register_exitproc+0xbc>)
  4003a2:	681c      	ldr	r4, [r3, #0]
  4003a4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d03e      	beq.n	40042a <__register_exitproc+0x9e>
  4003ac:	685a      	ldr	r2, [r3, #4]
  4003ae:	2a1f      	cmp	r2, #31
  4003b0:	dc1c      	bgt.n	4003ec <__register_exitproc+0x60>
  4003b2:	f102 0e01 	add.w	lr, r2, #1
  4003b6:	b176      	cbz	r6, 4003d6 <__register_exitproc+0x4a>
  4003b8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4003bc:	2401      	movs	r4, #1
  4003be:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4003c2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4003c6:	4094      	lsls	r4, r2
  4003c8:	4320      	orrs	r0, r4
  4003ca:	2e02      	cmp	r6, #2
  4003cc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4003d0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4003d4:	d023      	beq.n	40041e <__register_exitproc+0x92>
  4003d6:	3202      	adds	r2, #2
  4003d8:	f8c3 e004 	str.w	lr, [r3, #4]
  4003dc:	6828      	ldr	r0, [r5, #0]
  4003de:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4003e2:	f7ff ffd1 	bl	400388 <__retarget_lock_release_recursive>
  4003e6:	2000      	movs	r0, #0
  4003e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003ec:	4b17      	ldr	r3, [pc, #92]	; (40044c <__register_exitproc+0xc0>)
  4003ee:	b30b      	cbz	r3, 400434 <__register_exitproc+0xa8>
  4003f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4003f4:	f3af 8000 	nop.w
  4003f8:	4603      	mov	r3, r0
  4003fa:	b1d8      	cbz	r0, 400434 <__register_exitproc+0xa8>
  4003fc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400400:	6002      	str	r2, [r0, #0]
  400402:	2100      	movs	r1, #0
  400404:	6041      	str	r1, [r0, #4]
  400406:	460a      	mov	r2, r1
  400408:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40040c:	f04f 0e01 	mov.w	lr, #1
  400410:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400414:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400418:	2e00      	cmp	r6, #0
  40041a:	d0dc      	beq.n	4003d6 <__register_exitproc+0x4a>
  40041c:	e7cc      	b.n	4003b8 <__register_exitproc+0x2c>
  40041e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400422:	430c      	orrs	r4, r1
  400424:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400428:	e7d5      	b.n	4003d6 <__register_exitproc+0x4a>
  40042a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40042e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400432:	e7bb      	b.n	4003ac <__register_exitproc+0x20>
  400434:	6828      	ldr	r0, [r5, #0]
  400436:	f7ff ffa7 	bl	400388 <__retarget_lock_release_recursive>
  40043a:	f04f 30ff 	mov.w	r0, #4294967295
  40043e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400442:	bf00      	nop
  400444:	20000430 	.word	0x20000430
  400448:	00400450 	.word	0x00400450
  40044c:	00000000 	.word	0x00000000

00400450 <_global_impure_ptr>:
  400450:	20000008                                ... 

00400454 <_init>:
  400454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400456:	bf00      	nop
  400458:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40045a:	bc08      	pop	{r3}
  40045c:	469e      	mov	lr, r3
  40045e:	4770      	bx	lr

00400460 <__init_array_start>:
  400460:	00400331 	.word	0x00400331

00400464 <__frame_dummy_init_array_entry>:
  400464:	0040011d                                ..@.

00400468 <_fini>:
  400468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40046a:	bf00      	nop
  40046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40046e:	bc08      	pop	{r3}
  400470:	469e      	mov	lr, r3
  400472:	4770      	bx	lr

00400474 <__fini_array_start>:
  400474:	004000f9 	.word	0x004000f9


BlinkSAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000460  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00400460  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  20000434  00400894  00020434  2**2
                  ALLOC
  3 .stack        00003004  2000047c  004008dc  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003803  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000906  00000000  00000000  00023cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000c0  00000000  00000000  000245c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000088  00000000  00000000  00024684  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00001983  00000000  00000000  0002470c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002b77  00000000  00000000  0002608f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00061716  00000000  00000000  00028c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002a8  00000000  00000000  0008a31c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000000d7  00000000  00000000  0008a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 34 00 20 69 01 40 00 65 01 40 00 65 01 40 00     .4. i.@.e.@.e.@.
  400010:	65 01 40 00 65 01 40 00 65 01 40 00 00 00 00 00     e.@.e.@.e.@.....
	...
  40002c:	65 01 40 00 65 01 40 00 00 00 00 00 65 01 40 00     e.@.e.@.....e.@.
  40003c:	31 02 40 00 65 01 40 00 65 01 40 00 65 01 40 00     1.@.e.@.e.@.e.@.
  40004c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40005c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40006c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40007c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40008c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  40009c:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  4000ac:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  4000bc:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  4000cc:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  4000dc:	65 01 40 00 65 01 40 00 65 01 40 00 65 01 40 00     e.@.e.@.e.@.e.@.
  4000ec:	65 01 40 00 65 01 40 00 65 01 40 00                 e.@.e.@.e.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000434 	.word	0x20000434
  400114:	00000000 	.word	0x00000000
  400118:	00400460 	.word	0x00400460

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00400460 	.word	0x00400460
  400158:	20000438 	.word	0x20000438
  40015c:	00400460 	.word	0x00400460
  400160:	00000000 	.word	0x00000000

00400164 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400164:	e7fe      	b.n	400164 <Dummy_Handler>
	...

00400168 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400168:	b500      	push	{lr}
  40016a:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40016c:	4b25      	ldr	r3, [pc, #148]	; (400204 <Reset_Handler+0x9c>)
  40016e:	4a26      	ldr	r2, [pc, #152]	; (400208 <Reset_Handler+0xa0>)
  400170:	429a      	cmp	r2, r3
  400172:	d010      	beq.n	400196 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400174:	4b25      	ldr	r3, [pc, #148]	; (40020c <Reset_Handler+0xa4>)
  400176:	4a23      	ldr	r2, [pc, #140]	; (400204 <Reset_Handler+0x9c>)
  400178:	429a      	cmp	r2, r3
  40017a:	d20c      	bcs.n	400196 <Reset_Handler+0x2e>
  40017c:	3b01      	subs	r3, #1
  40017e:	1a9b      	subs	r3, r3, r2
  400180:	f023 0303 	bic.w	r3, r3, #3
  400184:	3304      	adds	r3, #4
  400186:	4413      	add	r3, r2
  400188:	491f      	ldr	r1, [pc, #124]	; (400208 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40018a:	f851 0b04 	ldr.w	r0, [r1], #4
  40018e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400192:	429a      	cmp	r2, r3
  400194:	d1f9      	bne.n	40018a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400196:	4b1e      	ldr	r3, [pc, #120]	; (400210 <Reset_Handler+0xa8>)
  400198:	4a1e      	ldr	r2, [pc, #120]	; (400214 <Reset_Handler+0xac>)
  40019a:	429a      	cmp	r2, r3
  40019c:	d20a      	bcs.n	4001b4 <Reset_Handler+0x4c>
  40019e:	3b01      	subs	r3, #1
  4001a0:	1a9b      	subs	r3, r3, r2
  4001a2:	f023 0303 	bic.w	r3, r3, #3
  4001a6:	3304      	adds	r3, #4
  4001a8:	4413      	add	r3, r2
		*pDest++ = 0;
  4001aa:	2100      	movs	r1, #0
  4001ac:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4001b0:	4293      	cmp	r3, r2
  4001b2:	d1fb      	bne.n	4001ac <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4001b4:	4a18      	ldr	r2, [pc, #96]	; (400218 <Reset_Handler+0xb0>)
  4001b6:	4b19      	ldr	r3, [pc, #100]	; (40021c <Reset_Handler+0xb4>)
  4001b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4001bc:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4001be:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4001c2:	fab3 f383 	clz	r3, r3
  4001c6:	095b      	lsrs	r3, r3, #5
  4001c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4001ca:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4001cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4001d0:	2200      	movs	r2, #0
  4001d2:	4b13      	ldr	r3, [pc, #76]	; (400220 <Reset_Handler+0xb8>)
  4001d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4001d6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4001d8:	4a12      	ldr	r2, [pc, #72]	; (400224 <Reset_Handler+0xbc>)
  4001da:	6813      	ldr	r3, [r2, #0]
  4001dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4001e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4001e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4001e6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4001ea:	b129      	cbz	r1, 4001f8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4001ec:	2201      	movs	r2, #1
  4001ee:	4b0c      	ldr	r3, [pc, #48]	; (400220 <Reset_Handler+0xb8>)
  4001f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4001f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4001f6:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4001f8:	4b0b      	ldr	r3, [pc, #44]	; (400228 <Reset_Handler+0xc0>)
  4001fa:	4798      	blx	r3

	/* Branch to main function */
	main();
  4001fc:	4b0b      	ldr	r3, [pc, #44]	; (40022c <Reset_Handler+0xc4>)
  4001fe:	4798      	blx	r3
  400200:	e7fe      	b.n	400200 <Reset_Handler+0x98>
  400202:	bf00      	nop
  400204:	20000000 	.word	0x20000000
  400208:	00400460 	.word	0x00400460
  40020c:	20000434 	.word	0x20000434
  400210:	2000047c 	.word	0x2000047c
  400214:	20000434 	.word	0x20000434
  400218:	e000ed00 	.word	0xe000ed00
  40021c:	00400000 	.word	0x00400000
  400220:	20000000 	.word	0x20000000
  400224:	e000ed88 	.word	0xe000ed88
  400228:	004002c9 	.word	0x004002c9
  40022c:	00400275 	.word	0x00400275

00400230 <SysTick_Handler>:
	TOGGLE(light_on);
}

void SysTick_Handler(void)
{
	if (++tickcount == TOGGLE_PERIOD)
  400230:	4a0d      	ldr	r2, [pc, #52]	; (400268 <SysTick_Handler+0x38>)
  400232:	6813      	ldr	r3, [r2, #0]
  400234:	3301      	adds	r3, #1
  400236:	6013      	str	r3, [r2, #0]
  400238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40023c:	d000      	beq.n	400240 <SysTick_Handler+0x10>
  40023e:	4770      	bx	lr
	if (light_on)
  400240:	4b0a      	ldr	r3, [pc, #40]	; (40026c <SysTick_Handler+0x3c>)
  400242:	681b      	ldr	r3, [r3, #0]
  400244:	b95b      	cbnz	r3, 40025e <SysTick_Handler+0x2e>
		LIGHT_ON();
  400246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  40024a:	4a09      	ldr	r2, [pc, #36]	; (400270 <SysTick_Handler+0x40>)
  40024c:	6351      	str	r1, [r2, #52]	; 0x34
	TOGGLE(light_on);
  40024e:	f083 0301 	eor.w	r3, r3, #1
  400252:	4a06      	ldr	r2, [pc, #24]	; (40026c <SysTick_Handler+0x3c>)
  400254:	6013      	str	r3, [r2, #0]
	{
		toggle_light();
		tickcount = 0;
  400256:	2200      	movs	r2, #0
  400258:	4b03      	ldr	r3, [pc, #12]	; (400268 <SysTick_Handler+0x38>)
  40025a:	601a      	str	r2, [r3, #0]
	}
}
  40025c:	e7ef      	b.n	40023e <SysTick_Handler+0xe>
		LIGHT_OFF();
  40025e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  400262:	4a03      	ldr	r2, [pc, #12]	; (400270 <SysTick_Handler+0x40>)
  400264:	6311      	str	r1, [r2, #48]	; 0x30
  400266:	e7f2      	b.n	40024e <SysTick_Handler+0x1e>
  400268:	20000454 	.word	0x20000454
  40026c:	20000450 	.word	0x20000450
  400270:	400e1400 	.word	0x400e1400

00400274 <main>:

int main(void)
{
  	DISABLE_WATCHDOG();
  400274:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400278:	4b0e      	ldr	r3, [pc, #56]	; (4002b4 <main+0x40>)
  40027a:	605a      	str	r2, [r3, #4]
    LED0_PIO->PIO_OER = LED0_PIN;
  40027c:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
  400280:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400284:	611a      	str	r2, [r3, #16]
    LED0_PIO->PIO_CODR = LED0_PIN;
  400286:	635a      	str	r2, [r3, #52]	; 0x34
    SysTick_Config(SystemCoreClock/TOGGLE_PERIOD);
  400288:	4b0b      	ldr	r3, [pc, #44]	; (4002b8 <main+0x44>)
  40028a:	681b      	ldr	r3, [r3, #0]
  40028c:	4a0b      	ldr	r2, [pc, #44]	; (4002bc <main+0x48>)
  40028e:	fba2 2303 	umull	r2, r3, r2, r3
  400292:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  400294:	3b01      	subs	r3, #1
  400296:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  40029a:	d209      	bcs.n	4002b0 <main+0x3c>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  40029c:	4a08      	ldr	r2, [pc, #32]	; (4002c0 <main+0x4c>)
  40029e:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4002a0:	21f0      	movs	r1, #240	; 0xf0
  4002a2:	4b08      	ldr	r3, [pc, #32]	; (4002c4 <main+0x50>)
  4002a4:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  4002a8:	2300      	movs	r3, #0
  4002aa:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4002ac:	2307      	movs	r3, #7
  4002ae:	6013      	str	r3, [r2, #0]
  	hardware_init();
  4002b0:	2000      	movs	r0, #0
  4002b2:	4770      	bx	lr
  4002b4:	400e1850 	.word	0x400e1850
  4002b8:	20000004 	.word	0x20000004
  4002bc:	10624dd3 	.word	0x10624dd3
  4002c0:	e000e010 	.word	0xe000e010
  4002c4:	e000ed00 	.word	0xe000ed00

004002c8 <__libc_init_array>:
  4002c8:	b570      	push	{r4, r5, r6, lr}
  4002ca:	4e0f      	ldr	r6, [pc, #60]	; (400308 <__libc_init_array+0x40>)
  4002cc:	4d0f      	ldr	r5, [pc, #60]	; (40030c <__libc_init_array+0x44>)
  4002ce:	1b76      	subs	r6, r6, r5
  4002d0:	10b6      	asrs	r6, r6, #2
  4002d2:	bf18      	it	ne
  4002d4:	2400      	movne	r4, #0
  4002d6:	d005      	beq.n	4002e4 <__libc_init_array+0x1c>
  4002d8:	3401      	adds	r4, #1
  4002da:	f855 3b04 	ldr.w	r3, [r5], #4
  4002de:	4798      	blx	r3
  4002e0:	42a6      	cmp	r6, r4
  4002e2:	d1f9      	bne.n	4002d8 <__libc_init_array+0x10>
  4002e4:	4e0a      	ldr	r6, [pc, #40]	; (400310 <__libc_init_array+0x48>)
  4002e6:	4d0b      	ldr	r5, [pc, #44]	; (400314 <__libc_init_array+0x4c>)
  4002e8:	1b76      	subs	r6, r6, r5
  4002ea:	f000 f8a7 	bl	40043c <_init>
  4002ee:	10b6      	asrs	r6, r6, #2
  4002f0:	bf18      	it	ne
  4002f2:	2400      	movne	r4, #0
  4002f4:	d006      	beq.n	400304 <__libc_init_array+0x3c>
  4002f6:	3401      	adds	r4, #1
  4002f8:	f855 3b04 	ldr.w	r3, [r5], #4
  4002fc:	4798      	blx	r3
  4002fe:	42a6      	cmp	r6, r4
  400300:	d1f9      	bne.n	4002f6 <__libc_init_array+0x2e>
  400302:	bd70      	pop	{r4, r5, r6, pc}
  400304:	bd70      	pop	{r4, r5, r6, pc}
  400306:	bf00      	nop
  400308:	00400448 	.word	0x00400448
  40030c:	00400448 	.word	0x00400448
  400310:	00400450 	.word	0x00400450
  400314:	00400448 	.word	0x00400448

00400318 <register_fini>:
  400318:	4b02      	ldr	r3, [pc, #8]	; (400324 <register_fini+0xc>)
  40031a:	b113      	cbz	r3, 400322 <register_fini+0xa>
  40031c:	4802      	ldr	r0, [pc, #8]	; (400328 <register_fini+0x10>)
  40031e:	f000 b805 	b.w	40032c <atexit>
  400322:	4770      	bx	lr
  400324:	00000000 	.word	0x00000000
  400328:	00400339 	.word	0x00400339

0040032c <atexit>:
  40032c:	2300      	movs	r3, #0
  40032e:	4601      	mov	r1, r0
  400330:	461a      	mov	r2, r3
  400332:	4618      	mov	r0, r3
  400334:	f000 b81e 	b.w	400374 <__register_exitproc>

00400338 <__libc_fini_array>:
  400338:	b538      	push	{r3, r4, r5, lr}
  40033a:	4c0a      	ldr	r4, [pc, #40]	; (400364 <__libc_fini_array+0x2c>)
  40033c:	4d0a      	ldr	r5, [pc, #40]	; (400368 <__libc_fini_array+0x30>)
  40033e:	1b64      	subs	r4, r4, r5
  400340:	10a4      	asrs	r4, r4, #2
  400342:	d00a      	beq.n	40035a <__libc_fini_array+0x22>
  400344:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400348:	3b01      	subs	r3, #1
  40034a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40034e:	3c01      	subs	r4, #1
  400350:	f855 3904 	ldr.w	r3, [r5], #-4
  400354:	4798      	blx	r3
  400356:	2c00      	cmp	r4, #0
  400358:	d1f9      	bne.n	40034e <__libc_fini_array+0x16>
  40035a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40035e:	f000 b877 	b.w	400450 <_fini>
  400362:	bf00      	nop
  400364:	00400460 	.word	0x00400460
  400368:	0040045c 	.word	0x0040045c

0040036c <__retarget_lock_acquire_recursive>:
  40036c:	4770      	bx	lr
  40036e:	bf00      	nop

00400370 <__retarget_lock_release_recursive>:
  400370:	4770      	bx	lr
  400372:	bf00      	nop

00400374 <__register_exitproc>:
  400374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400378:	4d2c      	ldr	r5, [pc, #176]	; (40042c <__register_exitproc+0xb8>)
  40037a:	4606      	mov	r6, r0
  40037c:	6828      	ldr	r0, [r5, #0]
  40037e:	4698      	mov	r8, r3
  400380:	460f      	mov	r7, r1
  400382:	4691      	mov	r9, r2
  400384:	f7ff fff2 	bl	40036c <__retarget_lock_acquire_recursive>
  400388:	4b29      	ldr	r3, [pc, #164]	; (400430 <__register_exitproc+0xbc>)
  40038a:	681c      	ldr	r4, [r3, #0]
  40038c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400390:	2b00      	cmp	r3, #0
  400392:	d03e      	beq.n	400412 <__register_exitproc+0x9e>
  400394:	685a      	ldr	r2, [r3, #4]
  400396:	2a1f      	cmp	r2, #31
  400398:	dc1c      	bgt.n	4003d4 <__register_exitproc+0x60>
  40039a:	f102 0e01 	add.w	lr, r2, #1
  40039e:	b176      	cbz	r6, 4003be <__register_exitproc+0x4a>
  4003a0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4003a4:	2401      	movs	r4, #1
  4003a6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4003aa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4003ae:	4094      	lsls	r4, r2
  4003b0:	4320      	orrs	r0, r4
  4003b2:	2e02      	cmp	r6, #2
  4003b4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4003b8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4003bc:	d023      	beq.n	400406 <__register_exitproc+0x92>
  4003be:	3202      	adds	r2, #2
  4003c0:	f8c3 e004 	str.w	lr, [r3, #4]
  4003c4:	6828      	ldr	r0, [r5, #0]
  4003c6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4003ca:	f7ff ffd1 	bl	400370 <__retarget_lock_release_recursive>
  4003ce:	2000      	movs	r0, #0
  4003d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003d4:	4b17      	ldr	r3, [pc, #92]	; (400434 <__register_exitproc+0xc0>)
  4003d6:	b30b      	cbz	r3, 40041c <__register_exitproc+0xa8>
  4003d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4003dc:	f3af 8000 	nop.w
  4003e0:	4603      	mov	r3, r0
  4003e2:	b1d8      	cbz	r0, 40041c <__register_exitproc+0xa8>
  4003e4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4003e8:	6002      	str	r2, [r0, #0]
  4003ea:	2100      	movs	r1, #0
  4003ec:	6041      	str	r1, [r0, #4]
  4003ee:	460a      	mov	r2, r1
  4003f0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4003f4:	f04f 0e01 	mov.w	lr, #1
  4003f8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4003fc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400400:	2e00      	cmp	r6, #0
  400402:	d0dc      	beq.n	4003be <__register_exitproc+0x4a>
  400404:	e7cc      	b.n	4003a0 <__register_exitproc+0x2c>
  400406:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40040a:	430c      	orrs	r4, r1
  40040c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400410:	e7d5      	b.n	4003be <__register_exitproc+0x4a>
  400412:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400416:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40041a:	e7bb      	b.n	400394 <__register_exitproc+0x20>
  40041c:	6828      	ldr	r0, [r5, #0]
  40041e:	f7ff ffa7 	bl	400370 <__retarget_lock_release_recursive>
  400422:	f04f 30ff 	mov.w	r0, #4294967295
  400426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40042a:	bf00      	nop
  40042c:	20000430 	.word	0x20000430
  400430:	00400438 	.word	0x00400438
  400434:	00000000 	.word	0x00000000

00400438 <_global_impure_ptr>:
  400438:	20000008                                ... 

0040043c <_init>:
  40043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40043e:	bf00      	nop
  400440:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400442:	bc08      	pop	{r3}
  400444:	469e      	mov	lr, r3
  400446:	4770      	bx	lr

00400448 <__init_array_start>:
  400448:	00400319 	.word	0x00400319

0040044c <__frame_dummy_init_array_entry>:
  40044c:	0040011d                                ..@.

00400450 <_fini>:
  400450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400452:	bf00      	nop
  400454:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400456:	bc08      	pop	{r3}
  400458:	469e      	mov	lr, r3
  40045a:	4770      	bx	lr

0040045c <__fini_array_start>:
  40045c:	004000f9 	.word	0x004000f9

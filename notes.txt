
/* 

void (*mail_handle[RX_MB_NUM])(void) = 
{
	&HANDLE_CONTROLLER,
	&HANDLE_SYSTEM_MONITOR,
	&HANDLE_POWER_SYSTEM,
	&HANDLE_MOTION_CONTROL,
	&HANDLE_RESERVED,
	&HANDLE_AUXILLARY
};
	void transmit_msg(void)
	{

	}


void HANDLE_CONTROLLER(void)
{

}

void HANDLE_SYSTEM_MONITOR(void)
{

}

void HANDLE_POWER_SYSTEM(void)
{

}

void HANDLE_MOTION_CONTROL(void)
{

}

 | CAN_IER_MB1 |
				  CAN_IER_MB2 | CAN_IER_MB3 |
				  CAN_IER_MB4 | CAN_IER_MB5 |
				  CAN_IER_MB6 | CAN_IER_MB7;

void HANDLE_RESERVED(void)
{

}
CAN1_PIO->PIO_ODR = CAN1_RX_PIN;
	CAN1_PIO->PIO_OER = CAN1_TX_PIN;

	CAN_PIO->PIO_ABCDSR[0] &= ~(CAN_RX_PIN | CAN_TX_PIN) ;
	CAN_PIO->PIO_ABCDSR[1] &= ~(CAN_RX_PIN | CAN_TX_PIN) ;
	CAN_PIO->PIO_PDR        =  (CAN_RX_PIN | CAN_TX_PIN) ;



	uint32_t populate_can_frame(const Frame_Format format)
	{
		
	}

		const uint64_t data = (CAN_MDH[AUXILLARY] << 32) |= CAN_MDL[AUXILLARY];


	uint32_t status = canController->CAN_IMR;
	canController->CAN_MB[transmit0_mb].CAN_MMR = CAN_MMR_MOT_MB_TX;

	#define BAUD_RATE 1000
#define RCV_FILTER 0x00
#define SEND_TIMES 1
#define SEND_INTERVAL 0
#define RX_MB_NUM 6

#define CONTROLLER_MB_MASK 00000001111b
#define SYSTEM_MONITOR_MB_MASK 00000011110b
#define POWER_SYSTEM_MB_MASK 00000111100b
#define MOTION_CONTROL_MB_MASK 00001111000b
#define RESERVED_MB_MASK 00011110000b
#define LIGHT_MB_MASK 00111100000b
#define TRANSMIT0_MB_MASK 01111000000b
#define TRANSMIT1_MB_MASK 11110000000b

#define LIGHT_MB_START 00111100000b

#define CONTROLLER_MB 0
#define SYSTEM_MONITOR_MB 1
#define POWER_SYSTEM_MB 2
#define MOTION_CONTROL_MB 3
#define RESERVED_MB 4
#define LIGHT_MB 5
#define TRANSMIT0_MB 6
#define TRANSMIT1_MB 7
 */